<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Productos en Tiempo Real</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <div class="container mt-4">
        <h1 class="text-center mb-4">Productos en Tiempo Real</h1>
        
        <!-- Filtros y ordenamiento -->
        <div class="row mb-4">
            <div class="col-md-3">
                <select class="form-select" id="sortSelect">
                    <option value="">Ordenar por precio</option>
                    <option value="asc">Menor a Mayor</option>
                    <option value="desc">Mayor a Menor</option>
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="categorySelect">
                    <option value="">Todas las categorías</option>
                    <option value="electronics">Electrónicos</option>
                    <option value="clothing">Ropa</option>
                    <option value="books">Libros</option>
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="limitSelect">
                    <option value="10">10 productos</option>
                    <option value="20">20 productos</option>
                    <option value="50">50 productos</option>
                </select>
            </div>
        </div>

        <!-- Lista de productos -->
        <div class="row" id="product-list">
            <!-- Los productos se insertarán aquí -->
        </div>

        <!-- Paginación -->
        <div class="row mt-4">
            <div class="col-12">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center" id="pagination">
                        <!-- La paginación se insertará aquí -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const socket = io();
        let currentPage = 1;
        let currentLimit = 10;
        let currentSort = '';
        let currentCategory = '';

        // Función para actualizar la URL con los parámetros
        function updateURL() {
            const params = new URLSearchParams({
                page: currentPage,
                limit: currentLimit,
                ...(currentSort && { sort: currentSort }),
                ...(currentCategory && { category: currentCategory })
            });
            window.history.pushState({}, '', `?${params.toString()}`);
        }

        // Función para renderizar productos
        function renderProducts(products) {
            const list = document.getElementById('product-list');
            list.innerHTML = '';

            products.forEach(product => {
                const col = document.createElement('div');
                col.className = 'col-md-4 mb-4';
                col.innerHTML = `
                    <div class="card h-100">
                        <img src="${product.thumbnail || 'https://via.placeholder.com/300'}" 
                             class="card-img-top" alt="${product.title}">
                        <div class="card-body">
                            <h5 class="card-title">${product.title}</h5>
                            <p class="card-text">${product.description}</p>
                            <p class="card-text"><strong>Precio: $${product.price}</strong></p>
                            <p class="card-text"><small class="text-muted">Categoría: ${product.category}</small></p>
                            <button class="btn btn-primary" onclick="addToCart('${product._id}')">
                                Agregar al carrito
                            </button>
                        </div>
                    </div>
                `;
                list.appendChild(col);
            });
        }

        // Función para renderizar paginación
        function renderPagination(data) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            // Botón anterior
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${!data.hasPrevPage ? 'disabled' : ''}`;
            prevLi.innerHTML = `
                <a class="page-link" href="#" onclick="changePage(${data.prevPage})">Anterior</a>
            `;
            pagination.appendChild(prevLi);

            // Página actual
            const currentLi = document.createElement('li');
            currentLi.className = 'page-item active';
            currentLi.innerHTML = `
                <span class="page-link">${data.page}</span>
            `;
            pagination.appendChild(currentLi);

            // Botón siguiente
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${!data.hasNextPage ? 'disabled' : ''}`;
            nextLi.innerHTML = `
                <a class="page-link" href="#" onclick="changePage(${data.nextPage})">Siguiente</a>
            `;
            pagination.appendChild(nextLi);
        }

        // Event listeners para los selectores
        document.getElementById('sortSelect').addEventListener('change', (e) => {
            currentSort = e.target.value;
            currentPage = 1;
            updateURL();
            socket.emit('getProducts', { page: currentPage, limit: currentLimit, sort: currentSort, category: currentCategory });
        });

        document.getElementById('categorySelect').addEventListener('change', (e) => {
            currentCategory = e.target.value;
            currentPage = 1;
            updateURL();
            socket.emit('getProducts', { page: currentPage, limit: currentLimit, sort: currentSort, category: currentCategory });
        });

        document.getElementById('limitSelect').addEventListener('change', (e) => {
            currentLimit = parseInt(e.target.value);
            currentPage = 1;
            updateURL();
            socket.emit('getProducts', { page: currentPage, limit: currentLimit, sort: currentSort, category: currentCategory });
        });

        // Función para cambiar de página
        window.changePage = function(page) {
            if (page) {
                currentPage = page;
                updateURL();
                socket.emit('getProducts', { page: currentPage, limit: currentLimit, sort: currentSort, category: currentCategory });
            }
        };

        // Función para agregar al carrito
        window.addToCart = async function(productId) {
            try {
                const response = await fetch('/api/carts/1/products/' + productId, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (response.ok) {
                    alert('Producto agregado al carrito');
                } else {
                    alert('Error al agregar el producto al carrito');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al agregar el producto al carrito');
            }
        };

        // Escucha el evento 'productsUpdated' y renderiza la lista
        socket.on('productsUpdated', (data) => {
            renderProducts(data.payload);
            renderPagination(data);
        });

        // Cargar productos iniciales
        socket.emit('getProducts', { page: currentPage, limit: currentLimit });
    </script>
</body>
</html>