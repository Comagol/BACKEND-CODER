<div class="container mt-4">
    <h1>Carrito de Compras</h1>
    
    {{#if products.length}}
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Subtotal</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                {{#each products}}
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="{{this.product.thumbnail}}" alt="{{this.product.title}}" style="width: 50px; margin-right: 10px;">
                            <div>
                                <h6 class="mb-0">{{this.product.title}}</h6>
                                <small class="text-muted">{{this.product.category}}</small>
                            </div>
                        </div>
                    </td>
                    <td>${{this.product.price}}</td>
                    <td>
                        <div class="input-group" style="width: 120px;">
                            <button class="btn btn-outline-secondary decrease-quantity" data-product-id="{{this.product._id}}">-</button>
                            <input type="number" class="form-control text-center quantity-input" value="{{this.quantity}}" min="1" data-product-id="{{this.product._id}}">
                            <button class="btn btn-outline-secondary increase-quantity" data-product-id="{{this.product._id}}">+</button>
                        </div>
                    </td>
                    <td>${{multiply this.product.price this.quantity}}</td>
                    <td>
                        <button class="btn btn-danger btn-sm remove-product" data-product-id="{{this.product._id}}">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
                {{/each}}
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3" class="text-end"><strong>Total:</strong></td>
                    <td><strong>${{total}}</strong></td>
                    <td></td>
                </tr>
            </tfoot>
        </table>
    </div>
    
    <div class="d-flex justify-content-between mt-4">
        <button class="btn btn-secondary" onclick="window.location.href='/products'">
            <i class="fas fa-arrow-left"></i> Seguir comprando
        </button>
        <button class="btn btn-danger" id="clearCart">
            <i class="fas fa-trash"></i> Vaciar carrito
        </button>
        <button class="btn btn-success" id="checkout">
            <i class="fas fa-shopping-cart"></i> Finalizar compra
        </button>
    </div>
    {{else}}
    <div class="text-center mt-5">
        <i class="fas fa-shopping-cart fa-4x text-muted"></i>
        <h3 class="mt-3">Tu carrito está vacío</h3>
        <p class="text-muted">Agrega algunos productos para comenzar a comprar</p>
        <button class="btn btn-primary mt-3" onclick="window.location.href='/products'">
            <i class="fas fa-arrow-left"></i> Ver productos
        </button>
    </div>
    {{/if}}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const cartId = '{{_id}}';
    
    // Función para actualizar la cantidad
    async function updateQuantity(productId, quantity) {
        try {
            const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ quantity })
            });
            
            if (response.ok) {
                window.location.reload();
            } else {
                alert('Error al actualizar la cantidad');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error al actualizar la cantidad');
        }
    }
    
    // Función para eliminar producto
    async function removeProduct(productId) {
        try {
            const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                window.location.reload();
            } else {
                alert('Error al eliminar el producto');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error al eliminar el producto');
        }
    }
    
    // Event listeners para los botones de cantidad
    document.querySelectorAll('.decrease-quantity').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.dataset.productId;
            const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
            const newQuantity = Math.max(1, parseInt(input.value) - 1);
            updateQuantity(productId, newQuantity);
        });
    });
    
    document.querySelectorAll('.increase-quantity').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.dataset.productId;
            const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
            const newQuantity = parseInt(input.value) + 1;
            updateQuantity(productId, newQuantity);
        });
    });
    
    // Event listener para inputs de cantidad
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('change', function() {
            const productId = this.dataset.productId;
            const newQuantity = Math.max(1, parseInt(this.value));
            updateQuantity(productId, newQuantity);
        });
    });
    
    // Event listener para botones de eliminar
    document.querySelectorAll('.remove-product').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.dataset.productId;
            if (confirm('¿Estás seguro de que deseas eliminar este producto del carrito?')) {
                removeProduct(productId);
            }
        });
    });
    
    // Event listener para vaciar carrito
    document.getElementById('clearCart')?.addEventListener('click', async function() {
        if (confirm('¿Estás seguro de que deseas vaciar el carrito?')) {
            try {
                const response = await fetch(`/api/carts/${cartId}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    window.location.reload();
                } else {
                    alert('Error al vaciar el carrito');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al vaciar el carrito');
            }
        }
    });
    
    // Event listener para finalizar compra
    document.getElementById('checkout')?.addEventListener('click', function() {
        // Aquí iría la lógica para finalizar la compra
        alert('Funcionalidad de checkout en desarrollo');
    });
});
</script> 